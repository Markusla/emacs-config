#+TITLE: My Emacs Configuration
#+AUTHOR: Markus Niemeier
#+DESCRIPTION: My Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+OPTIONS: num:nil

* TABLE OF CONTENTS :toc_3:
- [[#package-management][Package Management]]
  - [[#melpa-package-archive][MELPA Package-Archive]]
  - [[#use-package][use-package]]
  - [[#always-use-ensure-t][always use :ensure t]]
- [[#backupfiles][Backupfiles]]
- [[#utf-8][UTF-8]]
- [[#core][Core]]
  - [[#autoload-changed-files][autoload changed Files]]
  - [[#autorefresh-dired-and-other-buffers][autorefresh dired and other buffers]]
- [[#keybindings][Keybindings]]
  - [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#ui][UI]]
  - [[#display-line-inumbers-and-truncated-lines][Display Line iNumbers and Truncated Lines]]
  - [[#remove-menu--toolbar][remove menu + toolbar]]
    - [[#menu-bar][Menu Bar]]
    - [[#scroll-bar][Scroll Bar]]
    - [[#tool-bar][Tool Bar]]
  - [[#load-current-default-theme][Load Current default theme]]
  - [[#fonts][Fonts]]
  - [[#icons-all-the-icons][Icons (all-the-icons)]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#dashboard][Dashboard]]
- [[#company][COMPANY]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#misc][Misc]]
- [[#which-key][WHICH-KEY]]
  - [[#better-defaults][Better-Defaults]]
- [[#ivy][Ivy]]
  - [[#setup-and-use-ivy][Setup and use Ivy]]
  - [[#configure-swiper][Configure Swiper]]
  - [[#counsel-configuration][Counsel configuration]]
- [[#git][Git]]

* Package Management

** MELPA Package-Archive
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

** use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

** always use :ensure t
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

* Backupfiles
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.config/emacs/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src

* UTF-8 
#+begin_src emacs-lisp
  (cond ((eq system-type 'windows-nt)
     ;; Windows-specific code goes here.
     (prefer-coding-system 'utf-8)
     (setq coding-system-for-read 'utf-8)
     (setq coding-system-for-write 'utf-8)
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here. 
       ))
#+end_src

* Core
** autoload changed Files
Revert buffers when underlying file has changed

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** autorefresh dired and other buffers
#+begin_src emasc-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

* Keybindings

** MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  
#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* UI
Modify the look of Emacs

** Display Line iNumbers and Truncated Lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** remove menu + toolbar

*** Menu Bar

Switch the Menubar off by default (I like to keep everything clean)
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

... but still let me easily toggle it on/off
#+BEGIN_SRC emacs-lisp
;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)
#+END_SRC
*** Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Load Current default theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark t)
#+END_SRC

** Fonts
#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)
#+end_src

** Icons (all-the-icons)
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :after nerd-icons
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35      ;; sets modeline height
          doom-modeline-bar-width 5    ;; sets right bar width
          doom-modeline-persp-name t   ;; adds perspective name to modeline
          doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+end_src

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    :config
    (dashboard-setup-startup-hook))

    (setq dashboard-banner-logo-title "Welcome to Emacs, Markus!")
    (setq dashboard-startup-banner nil)
#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :hook (org-mode . toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t
    :commands org-bullets-mode
    :hook (org-mode . org-bullets-mode))
#+end_src

** Misc
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src


* WHICH-KEY

 #+begin_src emacs-lisp
   (use-package which-key
     :ensure t
     :init
       (which-key-mode 1)
     :config
     (setq which-key-side-window-location 'bottom
           which-key-sort-order #'which-key-key-order-alpha
           which-key-sort-uppercase-first nil
           which-key-add-column-padding 1
           which-key-max-display-columns nil
           which-key-min-display-lines 6
           which-key-side-window-slot -10
           which-key-side-window-max-height 0.25
           which-key-idle-delay 0.8
           which-key-max-description-length 25
           which-key-allow-imprecise-window-fit nil
           which-key-separator " â†’ " ))
 #+end_src

# ** Auto Complete
# #+begin_src emacs-lisp
# (use-package auto-complete
# :ensure t
# :config
# (ac-config-default))
# #+end_src

** Better-Defaults
 #+begin_src emacs-lisp
   (use-package better-defaults
          :ensure t)
 #+end_src

* Ivy
** Setup and use Ivy
 #+BEGIN_SRC emacs-lisp
   (use-package ivy
           :ensure t
           :config
           (ivy-mode 1)
           (setq ivy-use-virtual-buffers t)
           (setq enable-recursive-minibuffers t)
           ;; Ivy Keybindings
           (global-set-key (kbd "C-c C-r") 'ivy-resume))

   
   (use-package all-the-icons-ivy-rich
        :ensure t
        :init (all-the-icons-ivy-rich-mode 1))

   (use-package ivy-rich
        :after ivy
        :ensure t
        :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
        :custom
        (ivy-virtual-abbreviate 'full
         ivy-rich-switch-buffer-align-virtual-buffer t
         ivy-rich-path-style 'abbrev)
        :config
        (ivy-set-display-transformer 'ivy-switch-buffer
                                     'ivy-rich-switch-buffer-transformer))
 #+END_SRC

** Configure Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
     :ensure t
     :config
     (global-set-key "\C-s" 'swiper))
#+END_SRC

** Counsel configuration
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :ensure t
    :config 
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+END_SRC

* Git
I use magit for easy git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind 
    (("C-c g"     . 'magit-status)
     ("C-c C-p"   . 'magit-push)))
#+END_SRC
